solver call 1 excuted in 2.7179718017578125e-05 sec
Name:	solver
Type:	<class 'function'>
Signs:	(a, b, c)
Args: 	positional (1, 2, 3) 
		key=worded {}

Doc:	This function does something useful 
		:param bar1: description
		:param bar2: description

Source:	@decorator_3
		def solver(a, b, c):
		    """
		    This function does something useful 
		    :param bar1: description
		    :param bar2: description
		    """ 
		    if a == 0:
		        return 'incorrect input'
		
		    # calculating discriminant using formula
		    dis = b * b - 4 * a * c
		    sqrt_val = math.sqrt(abs(dis))
		
		    # checking condition for discriminant
		    if dis > 0:
		        #print(" real and different roots ")
		        return [(-b + sqrt_val)/(2 * a), (-b - sqrt_val)/(2 * a)]
		    
		    elif dis == 0:
		        #print(" real and same roots")
		        return [-b / (2 * a)]
		    else:
		        #print("Complex Roots")
		        return [str(-b / (2 * a)) + " + i" + str(sqrt_val) , str(-b / (2 * a)) + " - i" + str(sqrt_val)]
		
Output:	['-1.0 + i2.8284271247461903', '-1.0 - i2.8284271247461903']

pascal call 1 excuted in 4.1961669921875e-05 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (5,) 
		key=worded {}

Doc:	This function prints the pascal triangle
		:param n: number of rows

Source:	@decorator_3
		def pascal(n):
		    """
		    This function prints the pascal triangle
		    :param n: number of rows
		    """ 
		    for i in range(n):
		        # adjust space
		        print(' '*(n-i), end='')
		
		        # compute power of 11
		        print(' '.join(map(str, str(11**i))))
		
Output:	None

solver call 2 excuted in 1.6927719116210938e-05 sec
Name:	solver
Type:	<class 'function'>
Signs:	(a, b, c)
Args: 	positional (1, 2, 3) 
		key=worded {}

Doc:	This function does something useful 
		:param bar1: description
		:param bar2: description

Source:	@decorator_3
		def solver(a, b, c):
		    """
		    This function does something useful 
		    :param bar1: description
		    :param bar2: description
		    """ 
		    if a == 0:
		        return 'incorrect input'
		
		    # calculating discriminant using formula
		    dis = b * b - 4 * a * c
		    sqrt_val = math.sqrt(abs(dis))
		
		    # checking condition for discriminant
		    if dis > 0:
		        #print(" real and different roots ")
		        return [(-b + sqrt_val)/(2 * a), (-b - sqrt_val)/(2 * a)]
		    
		    elif dis == 0:
		        #print(" real and same roots")
		        return [-b / (2 * a)]
		    else:
		        #print("Complex Roots")
		        return [str(-b / (2 * a)) + " + i" + str(sqrt_val) , str(-b / (2 * a)) + " - i" + str(sqrt_val)]
		
Output:	['-1.0 + i2.8284271247461903', '-1.0 - i2.8284271247461903']

pascal call 2 excuted in 2.7894973754882812e-05 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (5,) 
		key=worded {}

Doc:	This function prints the pascal triangle
		:param n: number of rows

Source:	@decorator_3
		def pascal(n):
		    """
		    This function prints the pascal triangle
		    :param n: number of rows
		    """ 
		    for i in range(n):
		        # adjust space
		        print(' '*(n-i), end='')
		
		        # compute power of 11
		        print(' '.join(map(str, str(11**i))))
		
Output:	None

