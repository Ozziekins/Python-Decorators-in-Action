solver call 1 excuted in 4.8160552978515625e-05 sec
Name:	solver
Type:	<class 'function'>
Signs:	(a, b, c)
Args: 	positional (1, 2, 3) 
		key=worded {}

Doc:	This function does something useful 
		:param bar1: description
		:param bar2: description

Source:	@decorator_4
		@decorator_3
		def solver(a, b, c):
		    """
		    This function does something useful 
		    :param bar1: description
		    :param bar2: description
		    """ 
		    if a == 0:
		        return 'incorrect input'
		
		    # calculating discriminant using formula
		    dis = b * b - 4 * a * c
		    sqrt_val = math.sqrt(abs(dis))
		
		    # checking condition for discriminant
		    if dis > 0:
		        #print(" real and different roots ")
		        return [(-b + sqrt_val)/(2 * a), (-b - sqrt_val)/(2 * a)]
		    
		    elif dis == 0:
		        #print(" real and same roots")
		        return [-b / (2 * a)]
		    else:
		        #print("Complex Roots")
		        return [str(-b / (2 * a)) + " + i" + str(sqrt_val) , str(-b / (2 * a)) + " - i" + str(sqrt_val)]
		
Output:	['-1.0 + i2.8284271247461903', '-1.0 - i2.8284271247461903']

pascal call 1 excuted in 3.1948089599609375e-05 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (5,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@decorator_4
		@decorator_3
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	None

solver call 2 excuted in 5.9604644775390625e-06 sec
Name:	solver
Type:	<class 'function'>
Signs:	(a, b, c)
Args: 	positional (0, 0, 0) 
		key=worded {}

Doc:	This function does something useful 
		:param bar1: description
		:param bar2: description

Source:	@decorator_4
		@decorator_3
		def solver(a, b, c):
		    """
		    This function does something useful 
		    :param bar1: description
		    :param bar2: description
		    """ 
		    if a == 0:
		        return 'incorrect input'
		
		    # calculating discriminant using formula
		    dis = b * b - 4 * a * c
		    sqrt_val = math.sqrt(abs(dis))
		
		    # checking condition for discriminant
		    if dis > 0:
		        #print(" real and different roots ")
		        return [(-b + sqrt_val)/(2 * a), (-b - sqrt_val)/(2 * a)]
		    
		    elif dis == 0:
		        #print(" real and same roots")
		        return [-b / (2 * a)]
		    else:
		        #print("Complex Roots")
		        return [str(-b / (2 * a)) + " + i" + str(sqrt_val) , str(-b / (2 * a)) + " - i" + str(sqrt_val)]
		
Output:	incorrect input

pascal call 2 excuted in 1.33514404296875e-05 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (0,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@decorator_4
		@decorator_3
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	None

