func call 1 excuted in 0.00014138221740722656 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@decorator_3
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

pascal call 1 excuted in 3.3855438232421875e-05 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (3,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@decorator_3
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		

func call 2 excuted in 0.0003046989440917969 sec
Name:	func
Type:	<class 'function'>
Signs:	()
Args: 	positional () 
		key=worded {}

Doc:	None

Source:	@decorator_3
		def func():
		    print("I am ready to Start")
		    result = 0
		    n =  random.randint(10,751)
		    for i in range(n):
		        result += (i**2)
		
Output:	I am ready to Start
		

pascal call 2 excuted in 3.0040740966796875e-05 sec
Name:	pascal
Type:	<class 'function'>
Signs:	(n)
Args: 	positional (3,) 
		key=worded {}

Doc:	This function print pascal triangle
		:param n: The number of pascal triangle rows
		This function return None

Source:	@decorator_3
		def pascal(n):
		    """
		    This function print pascal triangle
		    :param n: The number of pascal triangle rows
		    This function return None
		    """
		    main_v = [1]
		    added_v = [0]
		    for _ in range(n):
		        print(main_v)
		        main_v = [left + right for left, right in zip(main_v + added_v, added_v + main_v)]
		
Output:	[1]
		[1, 1]
		[1, 2, 1]
		

